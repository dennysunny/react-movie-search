// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pages/WatchList should render as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WatchList
    config={
      Object {
        "images": Object {
          "backdrop_sizes": Array [
            "1",
            "2",
            "3",
            "4",
          ],
          "base_url": "path/to/image",
          "poster_sizes": Array [
            "1",
            "2",
            "3",
            "4",
          ],
          "profile_sizes": Array [
            "1",
            "2",
            "3",
            "4",
          ],
          "secure_base_url": "path/to/image",
          "still_sizes": Array [
            "1",
            "2",
            "3",
            "4",
          ],
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Context.Consumer>
        [Function]
      </Context.Consumer>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": [Function],
      },
      "ref": null,
      "rendered": [Function],
      "type": Object {
        "$$typeof": Symbol(react.context),
        "_calculateChangedBits": null,
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": Object {
            "authUser": false,
            "user": Object {},
          },
          "_currentValue2": Object {
            "authUser": false,
            "user": Object {},
          },
          "_threadCount": 0,
        },
      },
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Context.Consumer>
          [Function]
        </Context.Consumer>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": [Function],
        },
        "ref": null,
        "rendered": [Function],
        "type": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": Object {
            "$$typeof": Symbol(react.context),
            "Consumer": [Circular],
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": null,
            "_currentRenderer2": null,
            "_currentValue": Object {
              "authUser": false,
              "user": Object {},
            },
            "_currentValue2": Object {
              "authUser": false,
              "user": Object {},
            },
            "_threadCount": 0,
          },
        },
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
